// Generated by the Protocol Buffers 3.0 compiler.  DO NOT EDIT!
// Source file "person.proto"
// Syntax "Proto2"

import Foundation
import ProtocolBuffers


public func == (lhs: Person, rhs: Person) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasEmail == rhs.hasEmail) && (!lhs.hasEmail || lhs.email == rhs.email)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public struct PersonRoot {
  public static var sharedInstance : PersonRoot {
   struct Static {
       static let instance : PersonRoot = PersonRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final public class Person : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var hasId:Bool = false
  public private(set) var id:Int32 = Int32(0)

  public private(set) var hasName:Bool = false
  public private(set) var name:String = ""

  public private(set) var hasEmail:Bool = false
  public private(set) var email:String = ""

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasId {
      return false
    }
    if !hasName {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasId {
      try output.writeInt32(1, value:id)
    }
    if hasName {
      try output.writeString(2, value:name)
    }
    if hasEmail {
      try output.writeString(3, value:email)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasId {
      serialize_size += id.computeInt32Size(1)
    }
    if hasName {
      serialize_size += name.computeStringSize(2)
    }
    if hasEmail {
      serialize_size += email.computeStringSize(3)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Person> {
    var mergedArray = Array<Person>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Person? {
    return try Person.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> Person {
    return try Person.Builder().mergeFromData(data, extensionRegistry:PersonRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Person {
    return try Person.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> Person {
    return try Person.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Person {
    return try Person.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Person {
    return try Person.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Person {
    return try Person.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> Person.Builder {
    return Person.classBuilder() as! Person.Builder
  }
  public func getBuilder() -> Person.Builder {
    return classBuilder() as! Person.Builder
  }
  override public class func classBuilder() -> MessageBuilder {
    return Person.Builder()
  }
  override public func classBuilder() -> MessageBuilder {
    return Person.Builder()
  }
  public func toBuilder() throws -> Person.Builder {
    return try Person.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:Person) throws -> Person.Builder {
    return try Person.Builder().mergeFrom(prototype)
  }
  override public func encode() throws -> Dictionary<String,AnyObject> {
    guard isInitialized() else {
      throw ProtocolBuffersError.InvalidProtocolBuffer("Uninitialized Message")
    }

    var jsonMap:Dictionary<String,AnyObject> = Dictionary<String,AnyObject>()
    if hasId {
      jsonMap["id"] = NSNumber(int:id)
    }
    if hasName {
      jsonMap["name"] = name
    }
    if hasEmail {
      jsonMap["email"] = email
    }
    return jsonMap
  }
  override class public func decode(jsonMap:Dictionary<String,AnyObject>) throws -> Person {
    return try Person.Builder.decodeToBuilder(jsonMap).build()
  }
  override class public func fromJSON(data:NSData) throws -> Person {
    return try Person.Builder.fromJSONToBuilder(data).build()
  }
  override public func getDescription(indent:String) throws -> String {
    var output = ""
    if hasId {
      output += "\(indent) id: \(id) \n"
    }
    if hasName {
      output += "\(indent) name: \(name) \n"
    }
    if hasEmail {
      output += "\(indent) email: \(email) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasId {
             hashCode = (hashCode &* 31) &+ id.hashValue
          }
          if hasName {
             hashCode = (hashCode &* 31) &+ name.hashValue
          }
          if hasEmail {
             hashCode = (hashCode &* 31) &+ email.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "Person"
  }
  override public func className() -> String {
      return "Person"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return Person.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:Person = Person()
    public func getMessage() -> Person {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:Int32 {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:Int32) -> Person.Builder {
      self.id = value
      return self
    }
    public func clearId() -> Person.Builder{
         builderResult.hasId = false
         builderResult.id = Int32(0)
         return self
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String) -> Person.Builder {
      self.name = value
      return self
    }
    public func clearName() -> Person.Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasEmail:Bool {
         get {
              return builderResult.hasEmail
         }
    }
    public var email:String {
         get {
              return builderResult.email
         }
         set (value) {
             builderResult.hasEmail = true
             builderResult.email = value
         }
    }
    public func setEmail(value:String) -> Person.Builder {
      self.email = value
      return self
    }
    public func clearEmail() -> Person.Builder{
         builderResult.hasEmail = false
         builderResult.email = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    override public func clear() -> Person.Builder {
      builderResult = Person()
      return self
    }
    override public func clone() throws -> Person.Builder {
      return try Person.builderWithPrototype(builderResult)
    }
    override public func build() throws -> Person {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Person {
      let returnMe:Person = builderResult
      return returnMe
    }
    public func mergeFrom(other:Person) throws -> Person.Builder {
      if other == Person() {
       return self
      }
      if other.hasId {
           id = other.id
      }
      if other.hasName {
           name = other.name
      }
      if other.hasEmail {
           email = other.email
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    override public func mergeFromCodedInputStream(input:CodedInputStream) throws -> Person.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    override public func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Person.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8:
          id = try input.readInt32()

        case 18:
          name = try input.readString()

        case 26:
          email = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
    override class public func decodeToBuilder(jsonMap:Dictionary<String,AnyObject>) throws -> Person.Builder {
      let resultDecodedBuilder = Person.Builder()
      if let jsonValueId = jsonMap["id"] as? NSNumber {
        resultDecodedBuilder.id = jsonValueId.intValue
      }
      if let jsonValueName = jsonMap["name"] as? String {
        resultDecodedBuilder.name = jsonValueName
      }
      if let jsonValueEmail = jsonMap["email"] as? String {
        resultDecodedBuilder.email = jsonValueEmail
      }
      return resultDecodedBuilder
    }
    override class public func fromJSONToBuilder(data:NSData) throws -> Person.Builder {
      let jsonData = try NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions(rawValue: 0))
      guard let jsDataCast = jsonData as? Dictionary<String,AnyObject> else {
        throw ProtocolBuffersError.InvalidProtocolBuffer("Invalid JSON data")
      }
      return try Person.Builder.decodeToBuilder(jsDataCast)
    }
  }

}


// @@protoc_insertion_point(global_scope)
